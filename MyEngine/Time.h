#pragma once
#include <windows.h> // QueryPerformanceCounter, QueryPerformanceFrequency を利用するため

// ============================================================================
// Time クラス
//  - ゲームループにおける時間管理を担当する静的クラス。
//  - 高精度タイマー (QueryPerformanceCounter) を用いて
//    DeltaTime (前フレームとの差分時間) やアプリ開始からの総時間を提供する。
//  - Unity の Time.deltaTime / Time.time と同様の役割。
// ============================================================================
class Time
{
public:
    // ------------------------------------------------------------------------
    // Update
    //  - 毎フレームの最初に呼び出す。
    //  - 内部で高精度カウンタを参照し、DeltaTime と TotalTime を更新する。
    // ------------------------------------------------------------------------
    static void Update();

    // ------------------------------------------------------------------------
    // GetDeltaTime
    //  - 前フレームからの経過時間を返す（秒単位）。
    //  - フレームレートに依存しない移動/アニメーション計算に利用する。
    // ------------------------------------------------------------------------
    static float GetDeltaTime();

    // ------------------------------------------------------------------------
    // GetTime
    //  - アプリケーション開始からの累積経過時間を返す（秒単位）。
    //  - アニメーションや経過時間のログなどに利用できる。
    // ------------------------------------------------------------------------
    static float GetTime();

private:
    // ========================================================================
    // 内部管理用の静的変数
    // ========================================================================

    static double s_Frequency;      // パフォーマンスカウンタの周波数（1秒あたりのカウント数）
    static double s_DeltaTime;      // 前フレームと現在フレームの差分時間（秒）
    static double s_TotalTime;      // アプリ開始からの総経過時間（秒）
    static long long s_PrevCounter; // 前フレームでのカウンタ値
    static bool s_Initialized;      // 初回 Update() 呼び出しかどうかを判定するフラグ
};
