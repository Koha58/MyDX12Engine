#pragma once
#include <windows.h> // QueryPerformanceCounter / QueryPerformanceFrequency を使うため（LARGE_INTEGER もここ）

// ============================================================================
// Time
// ----------------------------------------------------------------------------
// 役割：
//   - フレームごとの経過時間（DeltaTime）と、起動からの累計時間（TotalTime）を提供する
//   - Windows の高精度タイマー（QPC: QueryPerformanceCounter）を使用
// 使い方：
//   1) 毎フレームの冒頭で Time::Update() を一度だけ呼ぶ
//   2) そのフレーム中は GetDeltaTime() / GetTime() を自由に参照
// 注意：
//   - マルチスレッド想定はしていない（メインスレッドからのみ呼ぶ）
//   - 初回 Update() では周波数・基準カウンタを初期化し、以後差分を積算する
// ============================================================================
class Time
{
public:
    // ------------------------------------------------------------------------
    // Update
    //  - 毎フレーム最初に 1 回呼ぶことで内部の経過時間を更新する
    //  - 初回のみ周波数（1秒あたりのカウント数）を取得して基準をセット
    //  - 以後は（現在カウント - 前回カウント）/ 周波数 を DeltaTime に格納し、TotalTime に加算
    // ------------------------------------------------------------------------
    static void Update();

    // ------------------------------------------------------------------------
    // GetDeltaTime
    //  - 前回 Update() 呼び出しからの経過時間（秒）
    //  - フレームレート非依存の移動/アニメーション速度計算に使用
    // ------------------------------------------------------------------------
    static float GetDeltaTime();

    // ------------------------------------------------------------------------
    // GetTime
    //  - アプリ開始からの累計経過時間（秒）
    //  - タイムライン駆動の挙動やログの時刻表示などに利用
    // ------------------------------------------------------------------------
    static float GetTime();

private:
    // ------------------------------------------------------------------------
    // 内部状態（静的に保持）
    // ------------------------------------------------------------------------

    // QPC の周波数（1 秒あたりのカウント数）
    // 例：3,000,000（3 MHz）など。Update() の初回で取得して以後不変。
    static double     s_Frequency;

    // 直近のフレーム間隔（秒）
    // Update() ごとに再計算される。GetDeltaTime() はこれを返す。
    static double     s_DeltaTime;

    // 起動からの累計経過時間（秒）
    // DeltaTime を毎回加算していく。
    static double     s_TotalTime;

    // 前回 Update() 時点での QPC カウンタ値
    // 次の Update() で現在値との差を取って DeltaTime を求める。
    static long long  s_PrevCounter;

    // 初回 Update() 済みかどうか
    // false のときは周波数取得と基準カウンタ設定を行う。
    static bool       s_Initialized;
};
