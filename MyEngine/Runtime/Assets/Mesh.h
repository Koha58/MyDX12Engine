#pragma once
#include <vector>
#include <DirectXMath.h>

/*
===============================================================================
 Vertex / MeshData
-------------------------------------------------------------------------------
目的:
  - 最低限のジオメトリ表現（頂点配列＋インデックス配列）をエンジン内部で共有するための
    共通データ構造を定義する。

設計メモ:
  - DirectXMath の型 (XMFLOAT3/4) を使い、CPU 側では “プレーンな構造体配列” として
    そのままアップロードできる形にしている。
  - HLSL 側のレイアウトに合わせること（例: POSITION/ NORMAL/ COLOR）。
  - 法線は左手系(+Z前)での面の表向き（CW/CCW）とカリング設定に注意。
  - インデックスは 32bit（unsigned int）。頂点数が 65535 以下で十分なら 16bit 化も可。
===============================================================================
*/

// ============================================================================
// 頂点データ
//  - 位置(Position)、法線(Normal)、頂点カラー(Color) を持つ基本フォーマット。
//  - HLSL の InputLayout と一致させること（例：POSITION, NORMAL, COLOR）。
//    VS側例：
//      struct VSInput { float3 pos:POSITION; float3 nrm:NORMAL; float4 col:COLOR; };
// ============================================================================
struct Vertex
{
    DirectX::XMFLOAT3 Position; // 頂点位置（ローカル座標）
    DirectX::XMFLOAT3 Normal;   // 頂点法線（ローカル空間、正規化推奨）
    DirectX::XMFLOAT4 Color;    // 頂点カラー（RGBA, 0..1）
};

// ============================================================================
// メッシュデータ
//  - 1つの描画対象（サブメッシュ相当）を構成する頂点配列とインデックス配列。
//  - Indices は三角形リスト想定（3つで1トライアングル）。
//    * 左手系＋面の表向き（CW/CCW）は PSO の RasterizerState.CullMode と合わせる。
//  - 複数サブメッシュが欲しい場合は、この構造体を複数持つ or サブメッシュ情報を追加する。
// ============================================================================
struct MeshData
{
    std::vector<Vertex>       Vertices; // 頂点リスト（Position/Normal/Color）
    std::vector<unsigned int> Indices;  // インデックス（三角形リスト前提, 32bit）
};
