#pragma once
#include <memory>
#include <string>
#include <unordered_map>
#include "Scene.h"

// ===============================================================
// SceneManager
// ---------------------------------------------------------------
// ・複数の Scene を保持し、現在のアクティブ Scene を管理するクラス
// ・Scene の追加/削除、切り替え、更新呼び出しをまとめて扱う
// ・Unity の SceneManager に相当
// ===============================================================
class SceneManager
{
public:
    // -----------------------------------------------------------
    // AddScene
    // シーンを登録する
    // @param name  : 識別用のキー（シーン名）
    // @param scene : 登録するシーンの shared_ptr
    // -----------------------------------------------------------
    void AddScene(const std::string& name, std::shared_ptr<Scene> scene);

    // -----------------------------------------------------------
    // RemoveScene
    // シーンを削除する
    // @param name : 削除対象のシーン名
    // -----------------------------------------------------------
    void RemoveScene(const std::string& name);

    // -----------------------------------------------------------
    // SwitchScene
    // アクティブシーンを切り替える
    // @param name : 切り替え先のシーン名
    // -----------------------------------------------------------
    void SwitchScene(const std::string& name);

    // -----------------------------------------------------------
    // GetActiveScene
    // 現在アクティブなシーンを取得する
    // @return : アクティブシーン（存在しない場合は nullptr）
    // -----------------------------------------------------------
    std::shared_ptr<Scene> GetActiveScene() const;

    // -----------------------------------------------------------
    // Update
    // アクティブシーンが存在すればその Update を呼ぶ
    // 毎フレーム、ゲームループから呼び出す想定
    // @param deltaTime : 前フレームからの経過時間
    // -----------------------------------------------------------
    void Update(float deltaTime);

private:
    // -----------------------------------------------------------
    // 管理用メンバ
    // -----------------------------------------------------------
    std::unordered_map<std::string, std::shared_ptr<Scene>> m_Scenes; // 登録済みのシーン一覧（名前→シーン）
    std::weak_ptr<Scene> m_CurrentScene;                              // 現在のアクティブシーン（弱参照で循環参照防止）
};
