#pragma once
// 多重インクルード防止。SceneManager は「複数 Scene の登録・切替・更新」を担う上位レイヤ。

#include <memory>
#include <string>
#include <unordered_map>

#include "Scene.h"

// ============================================================================
// SceneManager
// ----------------------------------------------------------------------------
// ・複数の Scene を名前で管理（追加/削除）し、「現在のアクティブ Scene」を保持する。
// ・ゲームループからは基本的に SceneManager::Update() だけ呼べばよい。
// ・循環参照を避けるため、アクティブ Scene は weak_ptr で保持（取得時に lock）。
// ・SwitchScene は参照の差し替えのみ（旧/新シーンの OnDisable/OnEnable などは
//   プロジェクト方針に応じて拡張ポイントで対応）。
// ============================================================================
class SceneManager
{
public:
    //--------------------------------------------------------------------------
    // AddScene
    // Scene を名前（キー）で登録する。
    // - 同名キーが存在する場合は上書き。
    //--------------------------------------------------------------------------
    void AddScene(const std::string& name, std::shared_ptr<Scene> scene);

    //--------------------------------------------------------------------------
    // RemoveScene
    // 登録済みの Scene を削除する。
    // - name が見つからない場合は何もしない。
    // - まだアクティブとして参照されている場合、GetActiveScene() は nullptr を返す可能性がある。
    //   （必要なら SwitchScene で先に別 Scene へ切替えてから呼ぶ）
    //--------------------------------------------------------------------------
    void RemoveScene(const std::string& name);

    //--------------------------------------------------------------------------
    // SwitchScene
    // 指定名の Scene を「アクティブ」にする。
    // - 登録されていなければ何もしない。
    // - ここでは旧シーンの終了処理/新シーンの初期化は行わない（拡張ポイント）。
    //   例：旧->新で SetActive の切替を行いたい場合は本メソッド内で実施する。
    //--------------------------------------------------------------------------
    void SwitchScene(const std::string& name);

    //--------------------------------------------------------------------------
    // GetActiveScene
    // 現在アクティブな Scene を取得する。
    // - 内部は weak_ptr。無効化/削除済みなら nullptr を返す。
    //--------------------------------------------------------------------------
    std::shared_ptr<Scene> GetActiveScene() const;

    //--------------------------------------------------------------------------
    // Update
    // アクティブ Scene があれば Update を委譲する。
    // - ゲームループから毎フレーム呼び出す想定。
    // @param deltaTime : 前フレームからの経過時間（秒）
    //--------------------------------------------------------------------------
    void Update(float deltaTime);

private:
    //======================= 管理用メンバ =======================
    // 登録済みの Scene 一覧（キー：名前）
    std::unordered_map<std::string, std::shared_ptr<Scene>> m_Scenes;

    // 現在のアクティブ Scene（循環参照回避のため弱参照）
    // - 参照切れの可能性があるため、使用時は必ず lock() してからチェック。
    std::weak_ptr<Scene> m_CurrentScene;
};
