#include "SceneManager.h"

// ===============================================================
// AddScene
// ---------------------------------------------------------------
// ・シーンを登録する
// ・同名キーが既に存在する場合は上書きされる
// ===============================================================
void SceneManager::AddScene(const std::string& name, std::shared_ptr<Scene> scene)
{
    m_Scenes[name] = scene;
}

// ===============================================================
// RemoveScene
// ---------------------------------------------------------------
// ・シーンを削除する
// ・該当キーが存在しない場合は何もしない
// ・削除後も m_CurrentScene がそのシーンを指している場合は注意
// ===============================================================
void SceneManager::RemoveScene(const std::string& name)
{
    m_Scenes.erase(name);
}

// ===============================================================
// SwitchScene
// ---------------------------------------------------------------
// ・アクティブシーンを切り替える
// ・指定名のシーンが登録されていなければ何もしない
// ・ここでは旧シーンの終了処理などは行わず、単に参照を切り替えるだけ
//   → OnDisable やシーン間リソース解放を行いたい場合は拡張ポイント
// ===============================================================
void SceneManager::SwitchScene(const std::string& name)
{
    auto it = m_Scenes.find(name);
    if (it != m_Scenes.end())
    {
        m_CurrentScene = it->second;
    }
}

// ===============================================================
// GetActiveScene
// ---------------------------------------------------------------
// ・現在のアクティブシーンを取得する
// ・内部は weak_ptr なので lock() で有効性を確認してから返す
// ・該当シーンが存在しなければ nullptr を返す
// ===============================================================
std::shared_ptr<Scene> SceneManager::GetActiveScene() const
{
    return m_CurrentScene.lock(); // weak_ptr → shared_ptr に変換
}

// ===============================================================
// Update
// ---------------------------------------------------------------
// ・現在のアクティブシーンが存在すれば、その Update を呼び出す
// ・存在しない場合は何も処理しない
// ===============================================================
void SceneManager::Update(float deltaTime)
{
    if (auto activeScene = m_CurrentScene.lock())
    {
        activeScene->Update(deltaTime);
    }
}
